[
  {
    "objectID": "posts/first-post/index.html",
    "href": "posts/first-post/index.html",
    "title": "First Post",
    "section": "",
    "text": "Instead of porting my blog, I decided that I would start from scratch so I could keep the posts that I wanted, and fix the ones that I would keep. I have learned a lot since the start of my original blog, and I thought it might be best to make note of that. Instead of removing less efficient approaches that my old posts might have, this will be a good chance to take advantage of the features that Quarto provide. I’ll give an example in my next post.\nGiven how much easier it will be to post, my goal will be to have a new blog post at least once a month. From this post it will not be too much of a challenge since I have a lot of drafts saved, however, my goal is for sustainability in the future.\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘folded’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog-becausejustyn",
    "section": "",
    "text": "news\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJun 24, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprobability\n\n\nsport\n\n\n\n\n\n\n\n\n\n\n\nJun 24, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nJun 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\nggplot\n\n\ndataviz\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJun 20, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nJun 20, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/virtual-environments/index.html",
    "href": "posts/virtual-environments/index.html",
    "title": "Virtual Environments",
    "section": "",
    "text": "My supervisor suggests that I use Google Collab for any code that takes more than 3 minutes to run.\nOnce I started using Python more and required libraries beyond Numpy and Pandas, I began to see the challenge of dealing with multiple conflicts. Additionally, there was the challenge of not being able to do something because one library required a particular version of Python.\n\nvenv\nSetting up a venv is quite simple. For mac, you simply would type the following into your terminal\n\n\nCode\npython3 -m venv env\n\n\nWhich would create a new enviornment called venv. Something worth noting is that loading the kernel will be much quick when you create a venv in your project.\n\n\nOne of the nice things about Quarto is that it forces you to become more comfortable with command line. If you do not want to learn command line terminology, you can use RStudio, which has user friendly options, however, I think in the long run being more comfortable with some of the terms will help you out.\nTo activate the environment, you simply would type\n\n\nCode\nsource env/bin/activate\n\n\nInstalling packages for your venv is quite simple.\n\n\nCode\npython3 -m pip install numpy jupyter matplotlib pandas plotly\n\n\nSay you want your environment to be reproducible, you will want to create a requirements document so someone can run requirements.txt and install the libraries from there.\n\n\nCode\npython3 -m pip freeze > requirements.txt\n\n\nWhich is quite simple for any user on a different machine. All you would have to do is\n\n\nCode\npython3 -m pip install -r requirements.txt\n\n\n\n\nrenv\nrenv is the R version of venv. Given the major changes between key versions, it is a good practice to use renv when working on something that other users might also work on.\n\n\nCode\ninstall.packages(\"renv\", repos='http://cran.us.r-project.org')\nrenv::init()\n\n\nFrom my understanding, if you do this, you will not need to set up a venv like above. I use Visual Code for this project, which automatically loads the enviornment in your local folder so that makes it easier.\n\n\nCode\nrenv::use_python()"
  },
  {
    "objectID": "posts/colouring-text-ggplot/index.html",
    "href": "posts/colouring-text-ggplot/index.html",
    "title": "Colouring Text in ggplot2",
    "section": "",
    "text": "I pr\n\n\nCode\nmtcars %>%\n  ggplot(aes(\n    x = wt, \n    y = mpg, \n    colour = factor(cyl)\n  )) +\n  geom_point() +\n  scale_colour_brewer(palette = \"Set2\") +\n  labs(\n    x = \"<span style = 'color:#93C1DE'>**wt**</span>\",\n    y = \"<span style = 'color:#2ca25f'>**mpg**</span>\",\n    title = \"Lower <span style='color:#93C1DE'>**wt**</span> tends to increase the amount of <span style='color:#2ca25f'>**mpg**</span>\",\n    colour = \"\"\n  ) +\n  theme(\n    plot.title = element_markdown(),\n    axis.title.x = element_markdown(),\n    axis.title.y = element_markdown()\n  )\n\n\n\n\n\nColouring one of interest\n\n\nCode\niris %>%\n  group_by(Species) %>%\n  summarise(mean_petal_width = mean(Petal.Width), .groups = \"drop\") %>%\n  mutate(\n    colour = c(\"lightgray\", \"lightgray\", \"#0072B2\"), #009E73\n    name = glue(\"<i style='color:{colour}'>{Species}</i>\"),\n    name = fct_reorder(name, mean_petal_width)\n  ) %>%\n  ggplot(aes(\n    x = name,\n    y = mean_petal_width,\n    fill = colour\n  )) +\n  geom_col() +\n  hrbrthemes::theme_ipsum() +\n  scale_fill_identity() +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"<span style = 'color: #43a2ca;'>Virginica irises</span> have the largest average sepal width\"\n  ) +\n  theme(\n    plot.title = element_markdown(),\n    axis.text.x = element_markdown(),\n    legend.position = \"none\"\n  )\n\n\n\n\n\nHaving them all coloured\n\n\nCode\niris %>%\n  group_by(Species) %>%\n  summarise(mean_petal_width = mean(Petal.Width), .groups = \"drop\") %>%\n  mutate(\n    colour = c(\"#91529e\", \"#009E73\", \"#0072B2\"), #009E73\n    name = glue(\"<i style='color:{colour}'>{Species}</i>\"),\n    name = fct_reorder(name, mean_petal_width)\n  ) %>%\n  ggplot(aes(\n    x = name,\n    y = mean_petal_width,\n    fill = colour\n  )) +\n  geom_col() +\n  hrbrthemes::theme_ipsum() +\n  scale_fill_identity() +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"<span style = 'color: #43a2ca;'>Virginica irises</span> have the largest average sepal width\"\n  ) +\n  theme(\n    plot.title = element_markdown(),\n    axis.text.x = element_markdown(),\n    legend.position = \"none\"\n  )"
  },
  {
    "objectID": "posts/gambling/index.html",
    "href": "posts/gambling/index.html",
    "title": "Gambling",
    "section": "",
    "text": "As a sports fan I have always enjoyed looking at win probability. I was amazed the day that I discovered head to head odds and a spread can be roughly converted to a teams expected win probability. There are three main types of odds used in sport:\nDecimal Odds: 3.5 or 3.5:1\nFractional Odds: 7/2\nMoneyline Odds: +350\nI find moneyline odds not very intuitive, so I am constantly having to search for ways to convert them. The logic for them is\nI have never liked this explaination because not only does it create an expectation on how much money one should bet, it also is not intuitive since you need to remove the initial money invested in the return since that was not money won.\nI used to gamble causally before (my biggest bet was $5), however, as I began to understand the odds and expected return better, I began to gamble less and less often. I am going to display how to convert these odds from one type to another now."
  },
  {
    "objectID": "posts/gambling/index.html#calculating-these-via-r-or-python",
    "href": "posts/gambling/index.html#calculating-these-via-r-or-python",
    "title": "Gambling",
    "section": "Calculating these via R or Python",
    "text": "Calculating these via R or Python\nglue() in R is the same as using f strings in Python, however, I wanted to display it in base R since I did not import anything for Python.\n\n\nIf I were to use glue(), it would be done via glue::glue(\"Favourite odds: {fav_prob}\\n Underdog odds:{underdog_prob}\")\n\nRPython\n\n\n\n\nCode\nmoney_line <- function(fav, underdog, ndigits = 3) {\n  \n  fav_odds = (fav * -1)\n  prob1 = fav_odds / (fav_odds + underdog)\n  prob2 = underdog / (fav_odds + underdog)\n  fav_prob = prob1 |> round(ndigits)\n  underdog_prob = prob2 |> round(ndigits)\n  \n  cat(\"Favourite odds\", fav_prob, \"\\nUnderdog odds: \", underdog_prob)\n}\n\n\n\n\nCode\nmoney_line(-130, 110)\n\n\nFavourite odds 0.542 \nUnderdog odds:  0.458\n\n\n\n\n\n\nCode\ndef money_line(fav, underdog, ndigits = 3):\n    fav_odds = (fav * -1)\n    prob1 = fav_odds / (fav_odds + underdog)\n    prob2 = underdog / (fav_odds + underdog)\n    fav_prob = round(prob1, ndigits)\n    underdog_prob = round(prob2, ndigits)\n\n    print(f\"\\nFavourite odds: {fav_prob} \\nUnderdog odds:{underdog_prob}\")\n\n\n\n\nCode\nmoney_line(-130, 110)\n\n\n\nFavourite odds: 0.542 \nUnderdog odds:0.458\n\n\n\n\n\nThe problem with the above function is that it requires the input values to be in a specific order. If you want a more general approach that does not specify the order of the two values, you could do something like this.\n\nRPython\n\n\n\n\nCode\nmoney_line2 <- function(arg1, arg2, ndigits = 3) {\n  \n  fav = sort(c(arg1, arg2))[1]\n  underdog = sort(c(arg1, arg2))[2]    \n  fav_val = fav * -1\n  fav_prob = fav_val / (fav_val + underdog)\n  return(fav_prob |> round(ndigits))\n}\n\n\n\n\nCode\nprint(money_line2(-425, 351))\n\n\n[1] 0.548\n\n\nCode\nprint(money_line2(351, -425))\n\n\n[1] 0.548\n\n\n\n\n\n\nCode\ndef money_line2(arg1, arg2, ndigits = 3):\n\n    fav = sorted([arg1, arg2])[0]\n    underdog = sorted([arg1, arg2])[1]\n    # underdog will be negative, so this makes it positive\n    fav_val = fav * -1\n    fav_prob = fav_val / (fav_val + underdog)\n    return round(fav_prob, ndigits)\n\n\n\n\nCode\nprint(money_line2(-425, 351))\n\n\n0.548\n\n\nCode\nprint(money_line2(351, -425))\n\n\n0.548\n\n\n\n\n\nIt is worth noting that the above functions can be done in less lines, but I like defining variables on their own line to make the code a bit more readable. For example, say I wanted to create the sigmoid function\n\n\nI imported math for Python for the log function.\n\nRPython\n\n\n\n\nCode\nlogit <- function(p) { \n  out <- p / (1 - p) |> log()\n  return(out)\n}\n\nlogit <- function(p) { \n  return(log(p/(1 - p)))\n}\n\n(function (p) p/(1 - p) |>log()) (x)\n\n\n\n\n\n\nCode\nimport math\n\ndef logit(p):\n    out = math.log(p / (1 - p))\n    return(out)\n\ndef logit(p):\n    return(math.log(p / (1 - p)))\n\nx = lambda p: math.log(p / (1 - p))\n\n\n\n\n\nBoth functions in R or Python would return the same output. While readability may not seem that important for a simple function\n\n\n\n\n\n\nThe anonymous function versions for both would be: R: (function (p) p/(1 - p) |>log()) (x) Python: x = lambda p: math.log(p / (1 - p))"
  },
  {
    "objectID": "posts/tidy-pandas/index.html",
    "href": "posts/tidy-pandas/index.html",
    "title": "Dplyr vs Pandas",
    "section": "",
    "text": "Uni starts back up soon so I thought it would be a good idea to brush up on my python. I have avoided using python since R is much more user friendly between dplyr and ggplot2. Now that RStudio has python computability via reticulate there is not really a good reason to completely avoid python. I think it is always good practice to get more comfortable with different languages, because sometimes you will need to do a task that is only available using a specific tool. Similarly, there are times when a group project works best when everybody is able to use a similar language.\nAs tempting as it might be to do all my data wrangling via tidyverse, I have been practising using pandas. This post was entirely written in RStudio, however, the python code will run in a notebook alternative such as Jupyter or VS Code.\n\nInstalling Packages\n\nRPython\n\n\n\n\nCode\ninstall.packages(\"tidyverse\")\n\n\n\n\nCode\nx <- c(1, 3)\nprint(x[1])\n\n\n[1] 1\n\n\n\n\n\n\nCode\n!python3 -m pip install pandas seaborn numpy\n\n#You can also install these packages in the terminal \npython3 -m pip install pandas seaborn numpy\n\n\n\n\n\nLearning python was overwhelming because you use the terminal much more often than you need to when using R. Over time, I have began to appreciate using a virtual environment because you can easily run multiple versions of python, which makes it more practical when you are using a package that requires an older version.\n\n\nImporting Data, Loading Libraries\nI have hidden the output of the code, however, you can view it by clicking the dropdown menu. I did this primarily for myself so it was easier to scroll down, but I think it is also more practical since the output is not necessarily the focus of this post.\n\nRPython\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndf <- diamonds\n\ndf %>% head()\n\n\n# A tibble: 6 × 10\n  carat cut       color clarity depth table price     x     y     z\n  <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n\n\n\n\n\n\nCode\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\ndf = sns.load_dataset('diamonds')\n\ndf.head()\n\n\n\n\n\n\n\nExample of Functions\n\n\nVerbsExample\n\n\n\n\n\ndplyr\npandas\n\n\n\n\nfilter() and slice()\nquery() and loc[], iloc[]\n\n\narrange()\nsort_values and sort_index()\n\n\nselect() and rename()\n__getitem__ and rename()\n\n\nselect()\nfilter()\n\n\ndistinct()\ndrop_duplicates()\n\n\nmutate()\nassign\n\n\nsummarise()\nagg\n\n\ngroup_by()\ngroupby()\n\n\nsample_n() and sample_frac()\nsample\n\n\n%>%\npipe[^1]\n\n\n\n\n\n\n\n\n\n\n\n\ndplyr\npandas\n\n\n\n\nfilter(df, col == 'val')\ndf.query('col == \"val\"')\n\n\narrange(df, col)\ndf.sort_values('val')\n\n\nrename(df, new_name = old_name)\ndf.rename(columns = {old_name = new_name})\n\n\nselect(df, col)\ndf.loc['val']\n\n\ndistinct(df, col, .keep_all = TRUE)\ndf[['val']].drop_duplicates()\n\n\nmutate(new_var = col - col2)\ndf.assign(new_var = df.col - df.col2)\n\n\nsummarise(mean = mean(col2), n = count(col1))\ndf.agg({\"col1\": \"count\", \"col2\", \"mean\"})\n\n\ngroup_by(df, col)\ndf.groupby('col')\n\n\n%>%\npipe[^1]\n\n\n\n\n\n\n\nOne of the confusing things are first is that there are many similar functions under different names. I personally find it easier to remember them by the way I write my code. For example, by only using <- as an assignment operator in R, I find it easier to treat the two languages differently.\n\n\nSelecting Columns\n\nRPython\n\n\n\n\nCode\nselect(df, color, cut)\n\n\n# A tibble: 53,940 × 2\n   color cut      \n   <ord> <ord>    \n 1 E     Ideal    \n 2 E     Premium  \n 3 E     Good     \n 4 I     Premium  \n 5 J     Good     \n 6 J     Very Good\n 7 I     Very Good\n 8 H     Very Good\n 9 E     Fair     \n10 H     Very Good\n# … with 53,930 more rows\n\n\n\n\n\n\nCode\ndf.filter(['color', 'cut'])\n\n#or\n#df[['color', 'cut']]\n\n\n\n\n\n\n\nIf we want to select a range of columns\n\nRPython\n\n\n\n\nCode\nselect(df, x:z)\n\n\n# A tibble: 53,940 × 3\n       x     y     z\n   <dbl> <dbl> <dbl>\n 1  3.95  3.98  2.43\n 2  3.89  3.84  2.31\n 3  4.05  4.07  2.31\n 4  4.2   4.23  2.63\n 5  4.34  4.35  2.75\n 6  3.94  3.96  2.48\n 7  3.95  3.98  2.47\n 8  4.07  4.11  2.53\n 9  3.87  3.78  2.49\n10  4     4.05  2.39\n# … with 53,930 more rows\n\n\n\n\n\n\nCode\ndf.loc[:, 'x':'z']\n\n\n\n\n\n\n\nIf we want to pipe it\n\nRPython\n\n\n\n\nCode\nselect(df, color, cut)\n\n\n# A tibble: 53,940 × 2\n   color cut      \n   <ord> <ord>    \n 1 E     Ideal    \n 2 E     Premium  \n 3 E     Good     \n 4 I     Premium  \n 5 J     Good     \n 6 J     Very Good\n 7 I     Very Good\n 8 H     Very Good\n 9 E     Fair     \n10 H     Very Good\n# … with 53,930 more rows\n\n\n\n\n\n\nCode\n(df\n.filter(['color', 'cut'])\n)\n\n\n\n\n\n\n\nIf we want to drop a certain column\n\nRPython\n\n\n\n\nCode\nselect(df, -(x:z))\n\n\n# A tibble: 53,940 × 7\n   carat cut       color clarity depth table price\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int>\n 1  0.23 Ideal     E     SI2      61.5    55   326\n 2  0.21 Premium   E     SI1      59.8    61   326\n 3  0.23 Good      E     VS1      56.9    65   327\n 4  0.29 Premium   I     VS2      62.4    58   334\n 5  0.31 Good      J     SI2      63.3    58   335\n 6  0.24 Very Good J     VVS2     62.8    57   336\n 7  0.24 Very Good I     VVS1     62.3    57   336\n 8  0.26 Very Good H     SI1      61.9    55   337\n 9  0.22 Fair      E     VS2      65.1    61   337\n10  0.23 Very Good H     VS1      59.4    61   338\n# … with 53,930 more rows\n\n\n\n\n\n\nCode\n(df\n.drop(['x', 'y', 'z'], axis = 1)\n)\n\n\n\n\n\n\n\nfiltering on one condition\n\nRPython\n\n\n\n\nCode\nfilter(df, color == 'E')\n\n\n# A tibble: 9,797 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n 5  0.2  Premium   E     SI2      60.2    62   345  3.79  3.75  2.27\n 6  0.32 Premium   E     I1       60.9    58   345  4.38  4.42  2.68\n 7  0.23 Very Good E     VS2      63.8    55   352  3.85  3.92  2.48\n 8  0.23 Very Good E     VS1      60.7    59   402  3.97  4.01  2.42\n 9  0.23 Very Good E     VS1      59.5    58   402  4.01  4.06  2.4 \n10  0.23 Good      E     VS1      64.1    59   402  3.83  3.85  2.46\n# … with 9,787 more rows\n\n\n\n\n\n\nCode\n(df\n.query(\"color == 'E'\")\n)\n\n\n\n\n\n\n\nIf we want multiple conditions\n\nRPython\n\n\n\n\nCode\nfilter(df, color == 'E', cut == 'Good')\n\n\n# A tibble: 933 × 10\n   carat cut   color clarity depth table price     x     y     z\n   <dbl> <ord> <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Good  E     VS1      56.9    65   327  4.05  4.07  2.31\n 2  0.23 Good  E     VS1      64.1    59   402  3.83  3.85  2.46\n 3  0.26 Good  E     VVS1     57.9    60   554  4.22  4.25  2.45\n 4  0.7  Good  E     VS2      57.5    58  2759  5.85  5.9   3.38\n 5  0.71 Good  E     VS2      59.2    61  2772  5.8   5.88  3.46\n 6  0.7  Good  E     VS2      64.1    59  2777  5.64  5.59  3.6 \n 7  0.7  Good  E     VS1      57.2    62  2782  5.81  5.77  3.31\n 8  0.76 Good  E     SI1      63.7    54  2789  5.76  5.85  3.7 \n 9  0.7  Good  E     VS2      64.1    55  2793  5.6   5.66  3.61\n10  0.73 Good  E     SI1      63.2    58  2796  5.7   5.76  3.62\n# … with 923 more rows\n\n\nCode\n#or\n#filter(df, color == 'E' & cut == 'Good')\n\n\n\n\n\n\nCode\n(df\n.query('color == \"E\" & cut == \"Good\"')\n)\n\n\n\n\n\n\n\nIf we want multiple conditions in one column\n\nRPython\n\n\n\n\nCode\ndf %>% \n    filter(color %in% c('E', 'J'))\n\n\n# A tibble: 12,605 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 5  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 6  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n 7  0.3  Good      J     SI1      64      55   339  4.25  4.28  2.73\n 8  0.23 Ideal     J     VS1      62.8    56   340  3.93  3.9   2.46\n 9  0.31 Ideal     J     SI2      62.2    54   344  4.35  4.37  2.71\n10  0.2  Premium   E     SI2      60.2    62   345  3.79  3.75  2.27\n# … with 12,595 more rows\n\n\n\n\n\n\nCode\n(df\n.query('color in [\"E\", \"J\"]')\n)\n\n\n\n\n\n\n\nCount Missing Values\n\nRPython\n\n\n\n\nCode\n# sum of missing values in each column\ndf %>% \n  summarise(across(everything(), ~sum(is.na(.))))\n\n\n# A tibble: 1 × 10\n  carat   cut color clarity depth table price     x     y     z\n  <int> <int> <int>   <int> <int> <int> <int> <int> <int> <int>\n1     0     0     0       0     0     0     0     0     0     0\n\n\nCode\n#purrr::map_df(df, ~sum(is.na(.)))\n\n\n\n\n\n\nCode\ndf.isna().sum()\n\n\n\n\n\n\n\nCount Unique Values in Each Column\n\nRPython\n\n\n\n\nCode\n# getting the count of unique values in each column \ndf %>% \n  summarise(across(everything(), n_distinct))\n\n#can also map across for the same result\npurrr::map_df(df, ~sum(n_distinct(.)))\n\n# if you just want numerical columns\ndf %>% \n  summarise(across(where(is.numeric), n_distinct))\n\n\n\n\n# A tibble: 1 × 10\n  carat   cut color clarity depth table price     x     y     z\n  <int> <int> <int>   <int> <int> <int> <int> <int> <int> <int>\n1   273     5     7       8   184   127 11602   554   552   375\n\n\n\n\n\n\nCode\ndf.nunique()\n\n# If you want unique values in numeric columns\ndf.select_dtypes(include = np.number).nunique()\n#or\ndf.select_dtypes('number').nunique()\n\n# If you just want the column names of numeric type\ndf.select_dtypes('number').columns\n# If you want them as a list\ndf.select_dtypes(include = np.number).columns.tolist()\n\n# count and unique values\ndf.agg(['count', 'size', 'nunique'])\n\n#for the proportions\ndf.select_dtypes(include = np.number).value_counts(normalize = True)\n#or\ndf.select_dtypes('number').value_counts(normalize = True)\n\n\n\n\n\n\n\n\n\n\nComplex Pipings\n\nRPython\n\n\n\n\nCode\ndf %>%\n  select(starts_with('c')) %>%\n  filter(cut %in% c('Ideal', 'Premium')) %>%\n  group_by(cut, color, clarity) %>%\n  summarise(\n    avgcarat = mean(carat, na.rm=TRUE),\n    n = n()\n    ) %>%\n  arrange(-avgcarat) %>% #desc(avgcarat) also works\n  head()\n\n\n`summarise()` has grouped output by 'cut', 'color'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 5\n# Groups:   cut, color [4]\n  cut     color clarity avgcarat     n\n  <ord>   <ord> <ord>      <dbl> <int>\n1 Ideal   J     I1          1.99     2\n2 Premium I     I1          1.61    24\n3 Premium J     I1          1.58    13\n4 Premium J     SI2         1.55   161\n5 Ideal   H     I1          1.48    38\n6 Premium I     SI2         1.42   312\n\n\n\n\n\n\nCode\n(df\n .filter(regex = '^c')\n .query('cut in [\"Ideal\", \"Premium\"]')\n .groupby(['cut', 'color', 'clarity'])\n .agg(['mean', 'size'])\n .sort_values(by = ('carat', 'mean'), ascending = False)\n .head())\n\n\n\n\n\n\n\nMore Examples\n\nTransforming\n\n\n\n\n\n\n\nR\npandas\n\n\n\n\nselect(df, col_one = col1)\ndf.rename(columns = {'col1': 'col_one'})['col_one']\n\n\nrename(df, col_one = col1)[^2]\ndf.rename(columns = {'col1': 'col_one'})\n\n\nmutate(df, c = a - b)\ndf.assign(c = df['a'] - df['b'])\n\n\n\n\n\nSorting\n\n\n\n\n\n\n\nR\npandas\n\n\n\n\narrange(df, col1, col2)\ndf.sort_values(['col1', 'col2'])\n\n\narrange(df, desc(col1))[^3]\ndf.sort_values('col1', ascending = False)\n\n\n\n\n\nGrouping and Summarising\n\n\n\n\n\n\n\n\nR\npandas\n\n\n\n\nsummary(df)\ndf.describe()\n\n\ngroup_by(df, col1)\ndf.groupby('col1')\n\n\ngroup_by(df, col1) %>% summarise(avg = mean(col1, na.rm = TRUE))\ndf.groupby('col1').agg({'col1' : 'mean'})\n\n\ngroup_by(df, col1) %>% summarise(total = sum(col1))\ndf.groupby('col1').sum()"
  },
  {
    "objectID": "posts/r-test/index.html",
    "href": "posts/r-test/index.html",
    "title": "Dplyr Test",
    "section": "",
    "text": "install.packages(\"renv\")\n#| eval: false\ninstall.packages(\"tidyverse\")\n\nImporting Data, Loading Libraries\n#| warning: false\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndf <- diamonds\n\ndf %>% head()\n\n\nSelecting Columns\nselect(df, color, cut)\n\n\nPython\n\n\nCode\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\ndf = sns.load_dataset('diamonds')\n\ndf.head()\n\n\n\n\n\n\n  \n    \n      \n      carat\n      cut\n      color\n      clarity\n      depth\n      table\n      price\n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      0.23\n      Ideal\n      E\n      SI2\n      61.5\n      55.0\n      326\n      3.95\n      3.98\n      2.43\n    \n    \n      1\n      0.21\n      Premium\n      E\n      SI1\n      59.8\n      61.0\n      326\n      3.89\n      3.84\n      2.31\n    \n    \n      2\n      0.23\n      Good\n      E\n      VS1\n      56.9\n      65.0\n      327\n      4.05\n      4.07\n      2.31\n    \n    \n      3\n      0.29\n      Premium\n      I\n      VS2\n      62.4\n      58.0\n      334\n      4.20\n      4.23\n      2.63\n    \n    \n      4\n      0.31\n      Good\n      J\n      SI2\n      63.3\n      58.0\n      335\n      4.34\n      4.35\n      2.75"
  },
  {
    "objectID": "posts/tidy-pandas/Untitled.html",
    "href": "posts/tidy-pandas/Untitled.html",
    "title": "becausejustyn",
    "section": "",
    "text": "library(dplyr)\nlibrary(ggplot2)\n\ndf <- diamonds\n\ndf %>% head()\n\n\nAttaching package: ‘dplyr’\n\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n\n\n\n\n\nA tibble: 6 × 10\n\n    caratcutcolorclaritydepthtablepricexyz\n    <dbl><ord><ord><ord><dbl><dbl><int><dbl><dbl><dbl>\n\n\n    0.23Ideal    ESI2 61.5553263.953.982.43\n    0.21Premium  ESI1 59.8613263.893.842.31\n    0.23Good     EVS1 56.9653274.054.072.31\n    0.29Premium  IVS2 62.4583344.204.232.63\n    0.31Good     JSI2 63.3583354.344.352.75\n    0.24Very GoodJVVS262.8573363.943.962.48\n\n\n\n\n\ndf.filter(['color', 'cut'])\n\n\n\n\n\n  \n    \n      \n      color\n      cut\n    \n  \n  \n    \n      0\n      E\n      Ideal\n    \n    \n      1\n      E\n      Premium\n    \n    \n      2\n      E\n      Good\n    \n    \n      3\n      I\n      Premium\n    \n    \n      4\n      J\n      Good\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      53935\n      D\n      Ideal\n    \n    \n      53936\n      D\n      Good\n    \n    \n      53937\n      D\n      Very Good\n    \n    \n      53938\n      H\n      Premium\n    \n    \n      53939\n      D\n      Ideal\n    \n  \n\n53940 rows × 2 columns\n\n\n\n\nselect(df, color, cut)\n\n\n\nA tibble: 53940 × 2\n\n    colorcut\n    <ord><ord>\n\n\n    EIdeal    \n    EPremium  \n    EGood     \n    IPremium  \n    JGood     \n    JVery Good\n    IVery Good\n    HVery Good\n    EFair     \n    HVery Good\n    JGood     \n    JIdeal    \n    FPremium  \n    JIdeal    \n    EPremium  \n    EPremium  \n    IIdeal    \n    JGood     \n    JGood     \n    JVery Good\n    IGood     \n    EVery Good\n    HVery Good\n    JVery Good\n    JVery Good\n    GVery Good\n    IPremium  \n    JVery Good\n    DVery Good\n    FVery Good\n    ⋮⋮\n    EPremium  \n    EPremium  \n    FPremium  \n    GGood     \n    IGood     \n    EIdeal    \n    DGood     \n    JVery Good\n    IPremium  \n    IIdeal    \n    EVery Good\n    EVery Good\n    DVery Good\n    IIdeal    \n    IIdeal    \n    IIdeal    \n    EIdeal    \n    FGood     \n    EPremium  \n    GIdeal    \n    EPremium  \n    FPremium  \n    EVery Good\n    EVery Good\n    DPremium  \n    DIdeal    \n    DGood     \n    DVery Good\n    HPremium  \n    DIdeal    \n\n\n\n\n\ndf.loc[:, 'x':'z']\n\n\n\n\n\n  \n    \n      \n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      3.95\n      3.98\n      2.43\n    \n    \n      1\n      3.89\n      3.84\n      2.31\n    \n    \n      2\n      4.05\n      4.07\n      2.31\n    \n    \n      3\n      4.20\n      4.23\n      2.63\n    \n    \n      4\n      4.34\n      4.35\n      2.75\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      53935\n      5.75\n      5.76\n      3.50\n    \n    \n      53936\n      5.69\n      5.75\n      3.61\n    \n    \n      53937\n      5.66\n      5.68\n      3.56\n    \n    \n      53938\n      6.15\n      6.12\n      3.74\n    \n    \n      53939\n      5.83\n      5.87\n      3.64\n    \n  \n\n53940 rows × 3 columns\n\n\n\n\nselect(df, x:z)\n\n\n\nA tibble: 53940 × 3\n\n    xyz\n    <dbl><dbl><dbl>\n\n\n    3.953.982.43\n    3.893.842.31\n    4.054.072.31\n    4.204.232.63\n    4.344.352.75\n    3.943.962.48\n    3.953.982.47\n    4.074.112.53\n    3.873.782.49\n    4.004.052.39\n    4.254.282.73\n    3.933.902.46\n    3.883.842.33\n    4.354.372.71\n    3.793.752.27\n    4.384.422.68\n    4.314.342.68\n    4.234.292.70\n    4.234.262.71\n    4.214.272.66\n    4.264.302.71\n    3.853.922.48\n    3.943.962.41\n    4.394.432.62\n    4.444.472.59\n    3.974.012.41\n    3.973.942.47\n    4.284.302.67\n    3.963.972.40\n    3.963.992.42\n    ⋮⋮⋮\n    5.745.773.48\n    5.435.383.23\n    5.485.403.36\n    5.845.813.74\n    5.945.903.77\n    5.845.863.63\n    5.715.743.61\n    6.126.093.86\n    5.935.853.49\n    5.895.873.66\n    5.575.613.49\n    5.595.653.53\n    5.675.583.55\n    5.805.843.57\n    5.825.843.59\n    5.955.973.67\n    5.715.733.54\n    6.066.133.54\n    6.035.963.68\n    5.765.733.53\n    5.795.743.49\n    5.745.733.43\n    5.715.763.47\n    5.695.723.49\n    5.695.733.58\n    5.755.763.50\n    5.695.753.61\n    5.665.683.56\n    6.156.123.74\n    5.835.873.64\n\n\n\n\n\n(df\n.filter(['color', 'cut'])\n)\n\n\n\n\n\n  \n    \n      \n      color\n      cut\n    \n  \n  \n    \n      0\n      E\n      Ideal\n    \n    \n      1\n      E\n      Premium\n    \n    \n      2\n      E\n      Good\n    \n    \n      3\n      I\n      Premium\n    \n    \n      4\n      J\n      Good\n    \n    \n      ...\n      ...\n      ...\n    \n    \n      53935\n      D\n      Ideal\n    \n    \n      53936\n      D\n      Good\n    \n    \n      53937\n      D\n      Very Good\n    \n    \n      53938\n      H\n      Premium\n    \n    \n      53939\n      D\n      Ideal\n    \n  \n\n53940 rows × 2 columns"
  }
]