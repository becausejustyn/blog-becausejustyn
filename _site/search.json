[
  {
    "objectID": "posts/first-post/index.html",
    "href": "posts/first-post/index.html",
    "title": "First Post",
    "section": "",
    "text": "Instead of porting my blog, I decided that I would start from scratch so I could keep the posts that I wanted, and fix the ones that I would keep. I have learned a lot since the start of my original blog, and I thought it might be best to make note of that. Instead of removing less efficient approaches that my old posts might have, this will be a good chance to take advantage of the features that Quarto provide. I’ll give an example in my next post.\nGiven how much easier it will be to post, my goal will be to have a new blog post at least once a month. From this post it will not be too much of a challenge since I have a lot of drafts saved, however, my goal is for sustainability in the future.\n\n\n\n\n\n\nExpand To Learn About Collapse\n\n\n\n\n\nThis is an example of a ‘folded’ caution callout that can be expanded by the user. You can use collapse=\"true\" to collapse it by default or collapse=\"false\" to make a collapsible callout that is expanded by default."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog-becausejustyn",
    "section": "",
    "text": "news\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJun 24, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprobability\n\n\nsport\n\n\n\n\n\n\n\n\n\n\n\nJun 24, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nJun 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nr\n\n\nggplot\n\n\ndataviz\n\n\n\n\n\n\n\n\n\n\n\nJun 21, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJun 20, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nJun 20, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/virtual-environments/index.html",
    "href": "posts/virtual-environments/index.html",
    "title": "Virtual Environments",
    "section": "",
    "text": "My supervisor suggests that I use Google Collab for any code that takes more than 3 minutes to run.\nOnce I started using Python more and required libraries beyond Numpy and Pandas, I began to see the challenge of dealing with multiple conflicts. Additionally, there was the challenge of not being able to do something because one library required a particular version of Python.\n\nvenv\nSetting up a venv is quite simple. For mac, you simply would type the following into your terminal\n\n\nCode\npython3 -m venv env\n\n\nWhich would create a new enviornment called venv. Something worth noting is that loading the kernel will be much quick when you create a venv in your project.\n\n\nOne of the nice things about Quarto is that it forces you to become more comfortable with command line. If you do not want to learn command line terminology, you can use RStudio, which has user friendly options, however, I think in the long run being more comfortable with some of the terms will help you out.\nTo activate the environment, you simply would type\n\n\nCode\nsource env/bin/activate\n\n\nInstalling packages for your venv is quite simple.\n\n\nCode\npython3 -m pip install numpy jupyter matplotlib pandas plotly\n\n\nSay you want your environment to be reproducible, you will want to create a requirements document so someone can run requirements.txt and install the libraries from there.\n\n\nCode\npython3 -m pip freeze > requirements.txt\n\n\nWhich is quite simple for any user on a different machine. All you would have to do is\n\n\nCode\npython3 -m pip install -r requirements.txt\n\n\n\n\nrenv\nrenv is the R version of venv. Given the major changes between key versions, it is a good practice to use renv when working on something that other users might also work on.\n\n\nCode\ninstall.packages(\"renv\", repos='http://cran.us.r-project.org')\nrenv::init()\n\n\nFrom my understanding, if you do this, you will not need to set up a venv like above. I use Visual Code for this project, which automatically loads the enviornment in your local folder so that makes it easier.\n\n\nCode\nrenv::use_python()"
  },
  {
    "objectID": "posts/colouring-text-ggplot/index.html",
    "href": "posts/colouring-text-ggplot/index.html",
    "title": "Colouring Text in ggplot2",
    "section": "",
    "text": "I pr\n\n\nCode\nmtcars %>%\n  ggplot(aes(\n    x = wt, \n    y = mpg, \n    colour = factor(cyl)\n  )) +\n  geom_point() +\n  scale_colour_brewer(palette = \"Set2\") +\n  labs(\n    x = \"<span style = 'color:#93C1DE'>**wt**</span>\",\n    y = \"<span style = 'color:#2ca25f'>**mpg**</span>\",\n    title = \"Lower <span style='color:#93C1DE'>**wt**</span> tends to increase the amount of <span style='color:#2ca25f'>**mpg**</span>\",\n    colour = \"\"\n  ) +\n  theme(\n    plot.title = element_markdown(),\n    axis.title.x = element_markdown(),\n    axis.title.y = element_markdown()\n  )\n\n\n\n\n\nColouring one of interest\n\n\nCode\niris %>%\n  group_by(Species) %>%\n  summarise(mean_petal_width = mean(Petal.Width), .groups = \"drop\") %>%\n  mutate(\n    colour = c(\"lightgray\", \"lightgray\", \"#0072B2\"), #009E73\n    name = glue(\"<i style='color:{colour}'>{Species}</i>\"),\n    name = fct_reorder(name, mean_petal_width)\n  ) %>%\n  ggplot(aes(\n    x = name,\n    y = mean_petal_width,\n    fill = colour\n  )) +\n  geom_col() +\n  hrbrthemes::theme_ipsum() +\n  scale_fill_identity() +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"<span style = 'color: #43a2ca;'>Virginica irises</span> have the largest average sepal width\"\n  ) +\n  theme(\n    plot.title = element_markdown(),\n    axis.text.x = element_markdown(),\n    legend.position = \"none\"\n  )\n\n\n\n\n\nHaving them all coloured\n\n\nCode\niris %>%\n  group_by(Species) %>%\n  summarise(mean_petal_width = mean(Petal.Width), .groups = \"drop\") %>%\n  mutate(\n    colour = c(\"#91529e\", \"#009E73\", \"#0072B2\"), #009E73\n    name = glue(\"<i style='color:{colour}'>{Species}</i>\"),\n    name = fct_reorder(name, mean_petal_width)\n  ) %>%\n  ggplot(aes(\n    x = name,\n    y = mean_petal_width,\n    fill = colour\n  )) +\n  geom_col() +\n  hrbrthemes::theme_ipsum() +\n  scale_fill_identity() +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"<span style = 'color: #43a2ca;'>Virginica irises</span> have the largest average sepal width\"\n  ) +\n  theme(\n    plot.title = element_markdown(),\n    axis.text.x = element_markdown(),\n    legend.position = \"none\"\n  )"
  },
  {
    "objectID": "posts/gambling/index.html",
    "href": "posts/gambling/index.html",
    "title": "Gambling",
    "section": "",
    "text": "As a sports fan I have always enjoyed looking at win probability. I was amazed the day that I discovered head to head odds and a spread can be roughly converted to a teams expected win probability. There are three main types of odds used in sport:\nDecimal Odds: 3.5 or 3.5:1\nFractional Odds: 7/2\nMoneyline Odds: +350\nI find moneyline odds not very intuitive, so I am constantly having to search for ways to convert them. The logic for them is\nI have never liked this explaination because not only does it create an expectation on how much money one should bet, it also is not intuitive since you need to remove the initial money invested in the return since that was not money won.\nI used to gamble causally before (my biggest bet was $5), however, as I began to understand the odds and expected return better, I began to gamble less and less often. I am going to display how to convert these odds from one type to another now."
  },
  {
    "objectID": "posts/gambling/index.html#calculating-these-via-r-or-python",
    "href": "posts/gambling/index.html#calculating-these-via-r-or-python",
    "title": "Gambling",
    "section": "Calculating these via R or Python",
    "text": "Calculating these via R or Python\nglue() in R is the same as using f strings in Python, however, I wanted to display it in base R since I did not import anything for Python.\n\n\nIf I were to use glue(), it would be done via glue::glue(\"Favourite odds: {fav_prob}\\n Underdog odds:{underdog_prob}\")\n\nRPython\n\n\n\n\nCode\nmoney_line <- function(fav, underdog, ndigits = 3) {\n  \n  fav_odds = (fav * -1)\n  prob1 = fav_odds / (fav_odds + underdog)\n  prob2 = underdog / (fav_odds + underdog)\n  fav_prob = prob1 |> round(ndigits)\n  underdog_prob = prob2 |> round(ndigits)\n  \n  cat(\"Favourite odds\", fav_prob, \"\\nUnderdog odds: \", underdog_prob)\n}\n\n\n\n\nCode\nmoney_line(-130, 110)\n\n\nFavourite odds 0.542 \nUnderdog odds:  0.458\n\n\n\n\n\n\nCode\ndef money_line(fav, underdog, ndigits = 3):\n    fav_odds = (fav * -1)\n    prob1 = fav_odds / (fav_odds + underdog)\n    prob2 = underdog / (fav_odds + underdog)\n    fav_prob = round(prob1, ndigits)\n    underdog_prob = round(prob2, ndigits)\n\n    print(f\"\\nFavourite odds: {fav_prob} \\nUnderdog odds:{underdog_prob}\")\n\n\n\n\nCode\nmoney_line(-130, 110)\n\n\n\nFavourite odds: 0.542 \nUnderdog odds:0.458\n\n\n\n\n\nThe problem with the above function is that it requires the input values to be in a specific order. If you want a more general approach that does not specify the order of the two values, you could do something like this.\n\nRPython\n\n\n\n\nCode\nmoney_line2 <- function(arg1, arg2, ndigits = 3) {\n  \n  fav = sort(c(arg1, arg2))[1]\n  underdog = sort(c(arg1, arg2))[2]    \n  fav_val = fav * -1\n  fav_prob = fav_val / (fav_val + underdog)\n  return(fav_prob |> round(ndigits))\n}\n\n\n\n\nCode\nprint(money_line2(-425, 351))\n\n\n[1] 0.548\n\n\nCode\nprint(money_line2(351, -425))\n\n\n[1] 0.548\n\n\n\n\n\n\nCode\ndef money_line2(arg1, arg2, ndigits = 3):\n\n    fav = sorted([arg1, arg2])[0]\n    underdog = sorted([arg1, arg2])[1]\n    # underdog will be negative, so this makes it positive\n    fav_val = fav * -1\n    fav_prob = fav_val / (fav_val + underdog)\n    return round(fav_prob, ndigits)\n\n\n\n\nCode\nprint(money_line2(-425, 351))\n\n\n0.548\n\n\nCode\nprint(money_line2(351, -425))\n\n\n0.548\n\n\n\n\n\nIt is worth noting that the above functions can be done in less lines, but I like defining variables on their own line to make the code a bit more readable. For example, say I wanted to create the sigmoid function\n\n\nI imported math for Python for the log function.\n\nRPython\n\n\n\n\nCode\nlogit <- function(p) { \n  out <- p / (1 - p) |> log()\n  return(out)\n}\n\nlogit <- function(p) { \n  return(log(p/(1 - p)))\n}\n\n(function (p) p/(1 - p) |>log()) (x)\n\n\n\n\n\n\nCode\nimport math\n\ndef logit(p):\n    out = math.log(p / (1 - p))\n    return(out)\n\ndef logit(p):\n    return(math.log(p / (1 - p)))\n\nx = lambda p: math.log(p / (1 - p))\n\n\n\n\n\nBoth functions in R or Python would return the same output. While readability may not seem that important for a simple function\n\n\n\n\n\n\nThe anonymous function versions for both would be: R: (function (p) p/(1 - p) |>log()) (x) Python: x = lambda p: math.log(p / (1 - p))"
  }
]