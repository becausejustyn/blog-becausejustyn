{
  "hash": "e5cbf22a3e500a8afde59dccecbf9acd",
  "result": {
    "markdown": "---\ntitle: \"NFL Elo 1\"\ndate: \"2022-07-07\"\ncategories: [r, nfl, elo]\nexecute: \n  freeze: true\n  eval: false\nformat:\n  html:\n    highlight: true\n    code-fold: show\n    code-tools: true\n    highlight-style: github\n---\n\n# My Awesome Title\n\nFor a simple overview of Elo everyone with no record is assigned a default rating of 1500. \n\nIf two teams rated at 1500 play each other with a $K$ value of 20: \n\n- the winner would end up with a 1510 rating,\n- the loser ending on a 1490 rating. \n\nThe trick of Elo comes when two teams of drastically different ratings play each other. \n\nFor example when 1600 beats 1400 with a $K$ value of 20, the new ratings are only 1602 and 1398. Not much changed â€“ only a difference of 2 because the favorite won and was expected to win. However, if 1400 beats 1600, the new ratings would be 1418 and 1582. A much bigger change of 18, because a huge upset occurred its likely that the original 1400 and 1600 rating were incorrect.\n\n``` {.python .cell-code}\nimport numpy as np\n```\n\n\n``` {.python .cell-code}\ndef rate_1vs1(p1, p2, k = 20, drawn = False):\n    rp1 = 10 ** (p1/400)\n    rp2 = 10 ** (p2/400)\n    exp_p1 = rp1 / float(rp1 + rp2)\n    exp_p2 = rp2 / float(rp1 + rp2)\n\n    s1, s2 = np.where(drawn == True, [0.5, 0.5], [1, 0])\n\n    new_p1 = p1 + k * (s1 - exp_p1)\n    new_p2 = p2 + k * (s2 - exp_p2)\n    return(new_p1, new_p2)\n    \n# if you need a win probability function\n\ndef win_probability(p1, p2):\n    diff = p1 - p2\n    p = 1 - 1 / (1 + 10 ** (diff / 400.0))\n    return(p)\n```\n\n\n``` {.python .cell-code}\nprint(rate_1vs1(1600, 1400))\nprint(rate_1vs1(1400, 1600))\nprint(win_probability(1600, 1400))\nprint(win_probability(1400, 1600))\n```\n\n\n## Margin of Victory Adjustments\n\nFor mov, fivethirtyeight uses the function ln(abs(mov) + 1)\n\n``` {.python .cell-code}\ndef rate_1vs1(p1, p2, mov = 1, k = 20, drawn = False):\n    \n    k_multiplier = np.where(mov >= 7, 2.0, 1.0)\n    \n    #k_multiplier = 1.0\n    #if mov >= 7: k_multiplier = 2.0\n    \n    rp1 = 10 ** (p1/400)\n    rp2 = 10 ** (p2/400)\n    exp_p1 = rp1 / float(rp1 + rp2)\n    exp_p2 = rp2 / float(rp1 + rp2)\n    \n    s1, s2 = np.where(drawn == True, [0.5, 0.5], [1, 0])\n\n    new_p1 = p1 + k_multiplier * k * (s1 - exp_p1)\n    new_p2 = p2 + k_multiplier * k * (s2 - exp_p2)\n    return(new_p1, new_p2)\n```\n\n\nAutocorrelation Lets say instead of two neutral teams playing each other on a neutral field we have two mismatched teams playing each other. We would have four possible outcomes\n\n1) favorite wins small\n2) favorite wins big\n3) underdog wins small\n4) underdog wins big\n\n``` {.python .cell-code}\nprint(rate_1vs1(1550, 1450, 1, 20))\nprint(rate_1vs1(1550, 1450, 14, 20))\nprint(rate_1vs1(1450, 1550, 1, 20))\nprint(rate_1vs1(1450, 1550, 14, 20))\n```\n\n\nTo have a variable $k$ multiplyer to reward underdog wins and punish good teams for losing to bad teams, we can use he equation (2.2/((ELOW-ELOL)*.001+2.2))\n\n\n\n$$\n\\frac{2.2}{((ELOW - ELOL) \\times 0.001 + 2.2)}\n$$\n\n\nFor example, if the favorite wins we have $2.2/(100 * 0.001 + 2.2) = 0.956$ and when the underdog wins we have $2.2/(-100 * 0.001 + 2.2) = 1.048$. Our rewritten elo rating function will be:\n\n``` {.python .cell-code}\ndef rate_1vs1(p1, p2, mov = 1, k = 20, drawn = False):\n\n    k_multiplier = np.where(mov >= 7, 2.0, 1.0)\n    corr_m = np.where(mov >= 7, 2.2 / ((p1 - p2)*.001 + 2.2), 1.0)\n\n    rp1 = 10 ** (p1/400)\n    rp2 = 10 ** (p2/400)\n    exp_p1 = rp1 / float(rp1 + rp2)\n    exp_p2 = rp2 / float(rp1 + rp2)\n    \n    s1, s2 = np.where(drawn == True, [0.5, 0.5], [1, 0])\n\n    new_p1 = p1 + k_multiplier * corr_m * k * (s1 - exp_p1)\n    new_p2 = p2 + k_multiplier * corr_m * k * (s2 - exp_p2)\n    return(new_p1, new_p2)\n```\n\n\n``` {.python .cell-code}\n#Our new ratings\n\nprint(rate_1vs1(1550, 1450, 1, 20))\nprint(rate_1vs1(1550, 1450, 14, 20))\nprint(rate_1vs1(1450, 1550, 1, 20))\nprint(rate_1vs1(1450, 1550, 14, 20))\n```\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}