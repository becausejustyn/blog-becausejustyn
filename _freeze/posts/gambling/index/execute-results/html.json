{
  "hash": "f0169fffc0547db98979a55ea7ea0c95",
  "result": {
    "markdown": "---\ntitle: \"Gambling\"\ndate: \"2022-06-24\"\ncategories: [probability, sport]\nformat:\n  html:\n    highlight: true\n    code-fold: show\n    code-tools: true\n    highlight-style: github\n---\n\n\nAs a sports fan I have always enjoyed looking at win probability. I was amazed the day that I discovered head to head odds and a spread can be roughly converted to a teams expected win probability. There are three main types of odds used in sport:\n\n`Decimal Odds:` 3.5 or 3.5:1  \n`Fractional Odds:` 7/2  \n`Moneyline Odds:` +350  \n\nI find moneyline odds not very intuitive, so I am constantly having to search for ways to convert them. The logic for them is\n\n> For every $100 you bet, how much money will you make.\n\nI have never liked this explaination because not only does it create an expectation on how much money one should bet, it also is not intuitive since you need to remove the initial money invested in the return since that was not money won.\n\n::: {.column-margin}\nThis is not gambling advice, I just enjoy looking at the numbers of it.\n:::\n\nI used to gamble causally before (my biggest bet was \\$5), however, as I began to understand the odds and expected return better, I began to gamble less and less often. I am going to display how to convert these odds from one type to another now.\n\n### Decimal Odds to Percentage\n\n\n$$\\frac{1}{\\text{decimal odds}}$$\n\n\nFor example:\n\n::: {.column-margin}\nNote: For the rest of this post I am rounding all values to 3 decimal values.\n:::\n\n\n$$\\text{Implied Probability} = \\frac{1}{3.5} = 0.286$$\n\n\n### Fractional Odds to Percentage\n\nFor every denominator n units you bet, you get numerator n units for a win. In the above example, you would get 7 units back if you bet 2 units and won.\n\n::: {.column-page-inset}\n\n$$\\frac{\\text{Denominator}}{\\text{Denominator + Numerator}} = \\text{Implied probability =}\\frac{2}{(7 + 2)} = \\frac{2}{9} = 0.222$$\n\n:::\n\n### Moneyline\n\n-   `-120` means you need to bet `$120` to make a profit of `$100` (total of `$220`)\n-   `+120` means you need to bet `$100` to make a profit of `$120` (total of `$220`)\n\nFor negative moneyline odds (that generally means the favourite):\n\n\n$$- \\text{Moneyline Odds} + 100$$\n\n\nFor example, -120\n\n#### Example of a Moneyline Odds of -120.\n\n\n$$\\text{Implied Probability} = \\frac{- (-120)}{- (-120) + 100}  = \\frac{120}{(120 + 100)}\n= \\frac{120}{220} = 0.545 = 54.5\\%$$\n\n#### Example of a Moneyline Odds of +120.\n\nFor a positive moneyline odds, e.g. +120, we do\n\n\n$$\\frac{100}{\\text{Moneyline Odds} + 100} = \\frac{100}{120 + 100} = \\frac{100}{220} = 0.455 = 45.5\\%$$\n\n\n### Implied Odds\n\n#### Implied Probability to Decimal Odds.\n\nFor example, an implied probability of 75%\n\n\n$$\\frac{100}{\\text{Implied Probability}} =\\frac{100}{75} = 1.33$$\n\n\n#### Implied Probability to Fractional Odds\n\nFor example, an implied probability of 25%\n\n\n$$\\left(\\frac{100}{\\text{Implied Probability}}  \\right) - 1 = \\underbrace{\\left( \\frac{100}{25} \\right) - 1 = 4 - 1 = 3}_{\\text{Expressed as 3 to 1}}$$\n\n\n### Implied Probability to Moneyline Odds\n\nThis depends on whether the implied probability is above 50% or below. In other words, the favourite or underdog. For sports where a draw is not common, calculating one will allow you to calculate the other by subtracting it from $1$. It gets a little bit more complicated for sports such as soccer or ice hockey where a draw is much more frequent.\n\nFor the favourite, it is simply:\n\n\n$$\\left( \\frac{\\text{Implied Probability}}{100 - \\text{Implied Probability}} \\right) \\times 100$$\n\n\nFor example, the implied probability of 75%\n\n\n$$- \\frac{Probability}{(100 – Probability) \\times 100} = - \\left( \\frac{75}{100-75} \\right) \\times 100 = - \\left( \\frac{75}{25} \\right) \\times 100 = 3 \\times 100 = -300$$\n\n\nFor the underdog (probability below 50%), we simply adjust the calculation by\n\n\n$$\\left( \\frac{100 - \\text{Implied Probability}}{\\text{Implied Probability}} \\right) \\times 100$$\n\n\nFor example, the implied probability of 25%\n\n\n$$\\frac{(100 – Probability)}{(Probability)} \\times 100 = \\left( \\frac{75}{25} \\times 100 \\right) = 3 \\times 100 = + 300$$\n\n\n## Calculating these via R or Python\n\n`glue()` in R is the same as using f strings in Python, however, I wanted to display it in base R since I did not import anything for Python. \n\n::: {.column-margin}\nIf I were to use `glue()`, it would be done via `glue::glue(\"Favourite odds: {fav_prob}\\n Underdog odds:{underdog_prob}\")`\n:::\n\n\n::: {.panel-tabset}\n\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\nmoney_line <- function(fav, underdog, ndigits = 3) {\n  \n  fav_odds = (fav * -1)\n  prob1 = fav_odds / (fav_odds + underdog)\n  prob2 = underdog / (fav_odds + underdog)\n  fav_prob = prob1 |> round(ndigits)\n  underdog_prob = prob2 |> round(ndigits)\n  \n  cat(\"Favourite odds\", fav_prob, \"\\nUnderdog odds: \", underdog_prob)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmoney_line(-130, 110)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFavourite odds 0.542 \nUnderdog odds:  0.458\n```\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\ndef money_line(fav, underdog, ndigits = 3):\n    fav_odds = (fav * -1)\n    prob1 = fav_odds / (fav_odds + underdog)\n    prob2 = underdog / (fav_odds + underdog)\n    fav_prob = round(prob1, ndigits)\n    underdog_prob = round(prob2, ndigits)\n\n    print(f\"\\nFavourite odds: {fav_prob} \\nUnderdog odds:{underdog_prob}\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmoney_line(-130, 110)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFavourite odds: 0.542 \nUnderdog odds:0.458\n```\n:::\n:::\n:::\n\n\nThe problem with the above function is that it requires the input values to be in a specific order. If you want a more general approach that does not specify the order of the two values, you could do something like this.\n\n::: {.panel-tabset}\n\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\nmoney_line2 <- function(arg1, arg2, ndigits = 3) {\n  \n  fav = sort(c(arg1, arg2))[1]\n  underdog = sort(c(arg1, arg2))[2]    \n  fav_val = fav * -1\n  fav_prob = fav_val / (fav_val + underdog)\n  return(fav_prob |> round(ndigits))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(money_line2(-425, 351))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.548\n```\n:::\n\n```{.r .cell-code}\nprint(money_line2(351, -425))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.548\n```\n:::\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\ndef money_line2(arg1, arg2, ndigits = 3):\n\n    fav = sorted([arg1, arg2])[0]\n    underdog = sorted([arg1, arg2])[1]\n    # underdog will be negative, so this makes it positive\n    fav_val = fav * -1\n    fav_prob = fav_val / (fav_val + underdog)\n    return round(fav_prob, ndigits)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(money_line2(-425, 351))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.548\n```\n:::\n\n```{.python .cell-code}\nprint(money_line2(351, -425))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.548\n```\n:::\n:::\n:::\n\nIt is worth noting that the above functions can be done in less lines, but I like defining variables on their own line to make the code a bit more readable. For example, say I wanted to create the sigmoid function\n\n::: {.column-margin}\nI imported `math` for Python for the log function. \n:::\n\n::: {.panel-tabset}\n\n### R\n\n::: {.cell}\n\n```{.r .cell-code}\nlogit <- function(p) { \n  out <- p / (1 - p) |> log()\n  return(out)\n}\n\nlogit <- function(p) { \n  return(log(p/(1 - p)))\n}\n\n(function (p) p/(1 - p) |>log()) (x)\n```\n:::\n\n### Python\n\n::: {.cell}\n\n```{.python .cell-code}\nimport math\n\ndef logit(p):\n    out = math.log(p / (1 - p))\n    return(out)\n\ndef logit(p):\n    return(math.log(p / (1 - p)))\n\nx = lambda p: math.log(p / (1 - p))\n```\n:::\n\n:::\n\nBoth functions in R or Python would return the same output. While readability may not seem that important for a simple function\n\n::: {.column-margin}\nThe anonymous function versions for both would be:\nR: `(function (p) p/(1 - p) |>log()) (x)`\nPython: `x = lambda p: math.log(p / (1 - p))`\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}